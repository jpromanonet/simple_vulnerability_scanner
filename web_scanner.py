import tkinter as tk
from tkinter import ttk
import requests

class SimpleScanner:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Vulnerability Scanner")

        # Target Entry
        ttk.Label(root, text="Enter Target URL:").grid(row=0, column=0, padx=10, pady=10)
        self.target_entry = ttk.Entry(root, width=40)
        self.target_entry.grid(row=0, column=1, padx=10, pady=10)

        # Scan Button
        ttk.Button(root, text="Scan", command=self.scan).grid(row=1, column=0, columnspan=2, pady=10)

        # Results Text
        self.results_text = tk.Text(root, height=10, width=50)
        self.results_text.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def scan(self):
        target_url = self.target_entry.get()

        # Perform XSS and SQL Injection tests
        xss_payload = "<script>alert('XSS_Test_String');</script>"
        sql_injection_payload = "1' OR '1'='1'; --"

        xss_result = self.test_payload(target_url, xss_payload)
        sql_injection_result = self.test_payload(target_url, sql_injection_payload)

        # Display results
        results = f"Scanning target: {target_url}\n"
        results += f"XSS Test Result: {'Vulnerable' if xss_result else 'Not Vulnerable'}\n"
        results += f"SQL Injection Test Result: {'Vulnerable' if sql_injection_result else 'Not Vulnerable'}"

        self.results_text.delete("1.0", tk.END)  # Clear previous results
        self.results_text.insert(tk.END, results)

    def test_payload(self, target_url, payload):
        try:
            response = requests.get(target_url + payload)
            # Check if the payload string is present in the response
            return payload in response.text
        except Exception as e:
            # Handle request exceptions (e.g., network error)
            print(f"Error during request: {e}")
            return False

if __name__ == "__main__":
    root = tk.Tk()
    app = SimpleScanner(root)
    root.mainloop()