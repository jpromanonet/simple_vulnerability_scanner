import tkinter as tk
from tkinter import ttk
import requests
import re

class SimpleScanner:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Vulnerability Scanner")

        # Target Entry
        ttk.Label(root, text="Enter Target URL:").grid(row=0, column=0, padx=10, pady=10)
        self.target_entry = ttk.Entry(root, width=40)
        self.target_entry.grid(row=0, column=1, padx=10, pady=10)

        # Scan Button
        ttk.Button(root, text="Scan", command=self.scan).grid(row=1, column=0, columnspan=2, pady=10)

        # Results Text
        self.results_text = tk.Text(root, height=10, width=50)
        self.results_text.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def scan(self):
        target_url = self.target_entry.get()

        # Perform XSS, SQL Injection, CSRF, and CORS tests
        xss_payload = "<script>alert('XSS_Test_String');</script>"
        sql_injection_payload = "1' OR '1'='1'; --"
        csrf_result = self.test_csrf(target_url)
        cors_result = self.test_cors(target_url)
        regex_xss_result = self.test_regex_xss(target_url)

        # Display results
        results = f"Scanning target: {target_url}\n"
        results += f"XSS Test Result: {'Vulnerable' if self.test_payload(target_url, xss_payload) else 'Not Vulnerable'}\n"
        results += f"SQL Injection Test Result: {'Vulnerable' if self.test_payload(target_url, sql_injection_payload) else 'Not Vulnerable'}\n"
        results += f"CSRF Test Result: {'Vulnerable' if csrf_result else 'Not Vulnerable'}\n"
        results += f"CORS Test Result: {'Vulnerable' if cors_result else 'Not Vulnerable'}\n"
        results += f"Regex-based XSS Test Result: {'Vulnerable' if regex_xss_result else 'Not Vulnerable'}"

        self.results_text.delete("1.0", tk.END)  # Clear previous results
        self.results_text.insert(tk.END, results)

    def test_payload(self, target_url, payload):
        try:
            response = requests.get(target_url + payload)
            # Check if the payload string is present in the response
            return payload in response.text
        except Exception as e:
            # Handle request exceptions (e.g., network error)
            print(f"Error during request: {e}")
            return False

    def test_csrf(self, target_url):
        try:
            response = requests.get(target_url)
            # Check if the response indicates that authentication is needed (simulating CSRF vulnerability)
            return "Authentication required" in response.text
        except Exception as e:
            # Handle request exceptions (e.g., network error)
            print(f"Error during request: {e}")
            return False

    def test_cors(self, target_url):
        try:
            # Send a simple cross-origin request (simulating CORS misconfiguration)
            response = requests.get(target_url, headers={'Origin': 'http://malicious-site.com'})
            # Check if the response headers indicate CORS misconfiguration
            return 'Access-Control-Allow-Origin' not in response.headers
        except Exception as e:
            # Handle request exceptions (e.g., network error)
            print(f"Error during request: {e}")
            return False

    def test_regex_xss(self, target_url):
        try:
            # Send a request with a regex pattern as a payload
            response = requests.get(target_url + r"<script.*>.*<\/script>")
            # Check if the response interprets the regex pattern as part of the HTML content
            return re.search(r"<script.*>.*<\/script>", response.text) is not None
        except Exception as e:
            # Handle request exceptions (e.g., network error)
            print(f"Error during request: {e}")
            return False

if __name__ == "__main__":
    root = tk.Tk()
    app = SimpleScanner(root)
    root.mainloop()
import tkinter as tk
from tkinter import ttk
import requests
import re

class SimpleScanner:
    def __init__(self, root):
        self.root = root
        self.root.title("Simple Vulnerability Scanner")

        # Target Entry
        ttk.Label(root, text="Enter Target URL:").grid(row=0, column=0, padx=10, pady=10)
        self.target_entry = ttk.Entry(root, width=40)
        self.target_entry.grid(row=0, column=1, padx=10, pady=10)

        # Scan Button
        ttk.Button(root, text="Scan", command=self.scan).grid(row=1, column=0, columnspan=2, pady=10)

        # Results Text
        self.results_text = tk.Text(root, height=10, width=50)
        self.results_text.grid(row=2, column=0, columnspan=2, padx=10, pady=10)

    def scan(self):
        target_url = self.target_entry.get()

        # Perform various security tests
        xss_payload = "<script>alert('XSS_Test_String');</script>"
        sql_injection_payload = "1' OR '1'='1'; --"
        csrf_result = self.test_csrf(target_url)
        cors_result = self.test_cors(target_url)
        regex_xss_result = self.test_regex_xss(target_url)
        security_misconfig_result = self.test_security_misconfig(target_url)
        idor_result = self.test_idor(target_url)
        ssrf_result = self.test_ssrf(target_url)
        xxe_result = self.test_xxe(target_url)
        file_inclusion_result = self.test_file_inclusion(target_url)
        redirect_forward_result = self.test_unvalidated_redirects(target_url)

        # Display results
        results = f"Scanning target: {target_url}\n"
        results += f"XSS Test Result: {'Vulnerable' if self.test_payload(target_url, xss_payload) else 'Not Vulnerable'}\n"
        results += f"SQL Injection Test Result: {'Vulnerable' if self.test_payload(target_url, sql_injection_payload) else 'Not Vulnerable'}\n"
        results += f"CSRF Test Result: {'Vulnerable' if csrf_result else 'Not Vulnerable'}\n"
        results += f"CORS Test Result: {'Vulnerable' if cors_result else 'Not Vulnerable'}\n"
        results += f"Regex-based XSS Test Result: {'Vulnerable' if regex_xss_result else 'Not Vulnerable'}\n"
        results += f"Security Misconfigurations Result: {'Vulnerable' if security_misconfig_result else 'Not Vulnerable'}\n"
        results += f"IDOR Test Result: {'Vulnerable' if idor_result else 'Not Vulnerable'}\n"
        results += f"SSRF Test Result: {'Vulnerable' if ssrf_result else 'Not Vulnerable'}\n"
        results += f"XXE Test Result: {'Vulnerable' if xxe_result else 'Not Vulnerable'}\n"
        results += f"File Inclusion Test Result: {'Vulnerable' if file_inclusion_result else 'Not Vulnerable'}\n"
        results += f"Unvalidated Redirects Test Result: {'Vulnerable' if redirect_forward_result else 'Not Vulnerable'}"

        self.results_text.delete("1.0", tk.END)  # Clear previous results
        self.results_text.insert(tk.END, results)

    def test_payload(self, target_url, payload):
        try:
            response = requests.get(target_url + payload)
            return payload in response.text
        except Exception as e:
            print(f"Error during request: {e}")
            return False

    def test_csrf(self, target_url):
        try:
            response = requests.get(target_url)
            return "Authentication required" in response.text
        except Exception as e:
            print(f"Error during request: {e}")
            return False

    def test_cors(self, target_url):
        try:
            response = requests.get(target_url, headers={'Origin': 'http://malicious-site.com'})
            return 'Access-Control-Allow-Origin' not in response.headers
        except Exception as e:
            print(f"Error during request: {e}")
            return False

    def test_regex_xss(self, target_url):
        try:
            response = requests.get(target_url + r"<script.*>.*<\/script>")
            return re.search(r"<script.*>.*<\/script>", response.text) is not None
        except Exception as e:
            print(f"Error during request: {e}")
            return False

    def test_security_misconfig(self, target_url):
        try:
            # Simulate a check for security misconfigurations by attempting to access a sensitive admin page
            misconfig_check_payload = "/admin"
            response = requests.get(target_url + misconfig_check_payload)

            # Check if the response indicates the presence of security misconfigurations
            return "SecurityMisconfig" in response.text
        except Exception as e:
            print(f"Error during request: {e}")
            return False

if __name__ == "__main__":
    root = tk.Tk()
    app = SimpleScanner(root)
    root.mainloop()